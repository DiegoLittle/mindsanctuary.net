import { createAsyncThunk, createSlice, current, PayloadAction } from '@reduxjs/toolkit'

import type { AppState, AppThunk } from '../index'


export interface CounterState {
  track: boolean
}

const initialState: CounterState = {
  track: false,
}

export const settingsSlice = createSlice({
  name: 'settings',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    acceptTrack: (state) => {
        state.track = true
    },

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
})

export const { acceptTrack } = settingsSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectSettings = (state: AppState) => state.settings

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.


export default settingsSlice.reducer